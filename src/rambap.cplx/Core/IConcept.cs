
namespace rambap.cplx.Core;

/// <summary>
/// Property of an <see cref="Pinstance"/> generated by a single <see cref="IConcept"/>
/// </summary>
public interface IInstanceConceptProperty { }

/// <summary>
/// Define the logic contructing a <see cref="Pinstance.Properties"/>
/// </summary>
public interface IConcept
{
    /// <summary>
    /// Define the logic to construct an <see cref="IInstanceConceptProperty"/> <br/>
    /// <br/>
    /// To împlement Concept behavior : <br/>
    /// 1 - Use <see cref="Support.ScanObjectContentFor"/> to analyse the template <br/>
    /// 2 - Access subcomponents to consolidate properties of subcomponents and calculate relations. <br/>
    /// 3 - Add the Concept property to the Pinstance
    /// </summary>
    /// <param name="instance">A partialy initialised instance that this concept may act on</param>
    /// <param name="subcomponents">Initialised subcomponents of the Part</param>
    /// <param name="template">The template of the instance</param>
    /// <returns>A newly created property to be added to this instance, or null if none is to be added</returns>
    internal IInstanceConceptProperty? MakeBase(Pinstance instance, IEnumerable<Component> subcomponents, Part template);
}

/// <summary>
/// Typed implementation of an <see cref="IConcept"/>
/// </summary>
/// <typeparam name="T">Type of <see cref="IInstanceConceptProperty"/> produced by this concept.</typeparam>
public abstract class IConcept<T> : IConcept
    where T : IInstanceConceptProperty
{
    /// <summary>Wrap a typed implementation of <see cref="IConcept.MakeBase(Pinstance)"/></summary>
    public IInstanceConceptProperty? MakeBase(Pinstance instance, IEnumerable<Component> subcomponents, Part template)
        => Make(instance, subcomponents, template);

    /// <summary>Typed implementation of <see cref="IConcept.MakeBase(Pinstance)"/><br/>
    /// <inheritdoc cref="IConcept.MakeBase(Pinstance, IEnumerable{Component}, Part)"/>
    /// </summary>
    public abstract T? Make(Pinstance instance, IEnumerable<Component> subcomponents, Part template);

    /// <summary>
    /// Expose GetPartConceptInitialisationData as a non-internal method, for concepts defined outside of this assembly
    /// </summary>
    protected static PCD GetPartConceptInitialisationData<PCD>(Part part)
        where PCD : new()
        => part.GetConteptInitialisationData<PCD>();
}