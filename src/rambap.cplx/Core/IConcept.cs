namespace rambap.cplx.Core;

/// <summary>
/// Property of an <see cref="Pinstance"/> generated by a single <see cref="IConcept"/>
/// </summary>
public interface IInstanceConceptProperty { }

/// <summary>
/// Define the logic contructing a <see cref="Pinstance.Properties"/>
/// </summary>
public interface IConcept
{
    /// <summary>
    /// Define the logic to construct an <see cref="IInstanceConceptProperty"/> <br/>
    /// Access the underlying part using Pinstance.Template. <br/>
    /// Access Pinstance.Components to consolidate properties of components and calculate relations.
    /// </summary>
    /// <param name="instance">A partialy initialised instance. Pinstance.Components is complete. Pinstance.Properties is not. </param>
    /// <param name="template">The part that is currently begin realized</param>
    /// <returns>A newly created property to be added to this instance, or null if none is to be added</returns>
    internal IInstanceConceptProperty? MakeBase(Pinstance instance, Part template);
}

/// <summary>
/// Typed implementation of an <see cref="IConcept"/>
/// </summary>
/// <typeparam name="T">Type of <see cref="IInstanceConceptProperty"/> produced by this concept.</typeparam>
public abstract class IConcept<T> : IConcept
    where T : IInstanceConceptProperty
{
    /// <summary>Wrap a typed implementation of <see cref="IConcept.MakeBase(Pinstance)"/></summary>
    public IInstanceConceptProperty? MakeBase(Pinstance instance, Part template) => Make(instance, template);

    /// <summary>Typed implementation of <see cref="IConcept.MakeBase(Pinstance)"/></summary>
    public abstract T? Make(Pinstance i, Part template);
}